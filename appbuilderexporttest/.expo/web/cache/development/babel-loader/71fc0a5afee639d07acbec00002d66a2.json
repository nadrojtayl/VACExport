{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError, Platform } from '@unimodules/core';\nimport ExpoSMS from \"./ExpoSMS\";\n\nfunction processAttachments(attachments) {\n  if (!attachments) {\n    return null;\n  }\n\n  attachments = Array.isArray(attachments) ? attachments : [attachments];\n\n  if (Platform.OS === 'android' && attachments.length > 1) {\n    if (__DEV__) {\n      console.warn('Android only supports a single attachment. The first array item is used.');\n    }\n\n    attachments = attachments.slice(0, 1);\n  }\n\n  return attachments;\n}\n\nexport function sendSMSAsync(addresses, message, options) {\n  var finalAddresses, finalOptions;\n  return _regeneratorRuntime.async(function sendSMSAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoSMS.sendSMSAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n\n        case 2:\n          finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n          finalOptions = _objectSpread({}, options);\n\n          if (options == null ? void 0 : options.attachments) {\n            finalOptions.attachments = processAttachments(options == null ? void 0 : options.attachments) || undefined;\n          }\n\n          return _context.abrupt(\"return\", ExpoSMS.sendSMSAsync(finalAddresses, message, finalOptions));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", ExpoSMS.isAvailableAsync());\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/SMS.ts"],"names":[],"mappings":";;;;;;;AACA,SAAS,mBAAT,EAA8B,QAA9B,QAA8C,kBAA9C;AAEA,OAAO,OAAP;;AAKA,SAAS,kBAAT,CACE,WADF,EAC0D;AAExD,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,EAAA,WAAW,GAAG,KAAK,CAAC,OAAN,CAAc,WAAd,IAA6B,WAA7B,GAA2C,CAAC,WAAD,CAAzD;;AACA,MAAI,QAAQ,CAAC,EAAT,KAAgB,SAAhB,IAA6B,WAAW,CAAC,MAAZ,GAAqB,CAAtD,EAAyD;AACvD,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,IAAR,CAAa,0EAAb;AACD;;AACD,IAAA,WAAW,GAAG,WAAW,CAAC,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAd;AACD;;AACD,SAAO,WAAP;AACD;;AAED,OAAO,SAAe,YAAf,CACL,SADK,EAEL,OAFK,EAGL,OAHK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAKA,OAAO,CAAC,YALR;AAAA;AAAA;AAAA;;AAAA,gBAMG,IAAI,mBAAJ,CAAwB,UAAxB,EAAoC,cAApC,CANH;;AAAA;AAQC,UAAA,cARD,GAQkB,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,SAA3B,GAAuC,CAAC,SAAD,CARzD;AASC,UAAA,YATD,qBAUA,OAVA;;AAYL,cAAI,OAAJ,oBAAI,OAAO,CAAE,WAAb,EAA0B;AACxB,YAAA,YAAY,CAAC,WAAb,GAA2B,kBAAkB,CAAC,OAAD,oBAAC,OAAO,CAAE,WAAV,CAAlB,IAA4C,SAAvE;AACD;;AAdI,2CAeE,OAAO,CAAC,YAAR,CAAqB,cAArB,EAAqC,OAArC,EAA8C,YAA9C,CAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBP,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,OAAO,CAAC,gBAAR,EADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { UnavailabilityError, Platform } from '@unimodules/core';\n\nimport ExpoSMS from './ExpoSMS';\nimport { SMSAttachment, SMSResponse, SMSOptions } from './SMS.types';\n\nexport { SMSResponse };\n\nfunction processAttachments(\n  attachments: SMSAttachment | SMSAttachment[] | undefined\n): SMSAttachment[] | null {\n  if (!attachments) {\n    return null;\n  }\n  attachments = Array.isArray(attachments) ? attachments : [attachments];\n  if (Platform.OS === 'android' && attachments.length > 1) {\n    if (__DEV__) {\n      console.warn('Android only supports a single attachment. The first array item is used.');\n    }\n    attachments = attachments.slice(0, 1);\n  }\n  return attachments;\n}\n\nexport async function sendSMSAsync(\n  addresses: string | string[],\n  message: string,\n  options?: SMSOptions\n): Promise<SMSResponse> {\n  if (!ExpoSMS.sendSMSAsync) {\n    throw new UnavailabilityError('expo-sms', 'sendSMSAsync');\n  }\n  const finalAddresses = Array.isArray(addresses) ? addresses : [addresses];\n  const finalOptions = {\n    ...options,\n  } as SMSOptions;\n  if (options?.attachments) {\n    finalOptions.attachments = processAttachments(options?.attachments) || undefined;\n  }\n  return ExpoSMS.sendSMSAsync(finalAddresses, message, finalOptions);\n}\n\n/**\n * The device has a telephony radio with data communication support.\n * - Always returns `false` in the iOS simulator, and browser\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return ExpoSMS.isAvailableAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}