{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UnavailabilityError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport { PermissionStatus } from 'unimodules-permissions-interface';\nimport ExpoCalendar from \"./ExpoCalendar\";\nexport var DayOfTheWeek;\n\n(function (DayOfTheWeek) {\n  DayOfTheWeek[DayOfTheWeek[\"Sunday\"] = 1] = \"Sunday\";\n  DayOfTheWeek[DayOfTheWeek[\"Monday\"] = 2] = \"Monday\";\n  DayOfTheWeek[DayOfTheWeek[\"Tuesday\"] = 3] = \"Tuesday\";\n  DayOfTheWeek[DayOfTheWeek[\"Wednesday\"] = 4] = \"Wednesday\";\n  DayOfTheWeek[DayOfTheWeek[\"Thursday\"] = 5] = \"Thursday\";\n  DayOfTheWeek[DayOfTheWeek[\"Friday\"] = 6] = \"Friday\";\n  DayOfTheWeek[DayOfTheWeek[\"Saturday\"] = 7] = \"Saturday\";\n})(DayOfTheWeek || (DayOfTheWeek = {}));\n\nexport var MonthOfTheYear;\n\n(function (MonthOfTheYear) {\n  MonthOfTheYear[MonthOfTheYear[\"January\"] = 1] = \"January\";\n  MonthOfTheYear[MonthOfTheYear[\"February\"] = 2] = \"February\";\n  MonthOfTheYear[MonthOfTheYear[\"March\"] = 3] = \"March\";\n  MonthOfTheYear[MonthOfTheYear[\"April\"] = 4] = \"April\";\n  MonthOfTheYear[MonthOfTheYear[\"May\"] = 5] = \"May\";\n  MonthOfTheYear[MonthOfTheYear[\"June\"] = 6] = \"June\";\n  MonthOfTheYear[MonthOfTheYear[\"July\"] = 7] = \"July\";\n  MonthOfTheYear[MonthOfTheYear[\"August\"] = 8] = \"August\";\n  MonthOfTheYear[MonthOfTheYear[\"September\"] = 9] = \"September\";\n  MonthOfTheYear[MonthOfTheYear[\"October\"] = 10] = \"October\";\n  MonthOfTheYear[MonthOfTheYear[\"November\"] = 11] = \"November\";\n  MonthOfTheYear[MonthOfTheYear[\"December\"] = 12] = \"December\";\n})(MonthOfTheYear || (MonthOfTheYear = {}));\n\nexport { PermissionStatus };\nexport function getCalendarsAsync(entityType) {\n  return _regeneratorRuntime.async(function getCalendarsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExpoCalendar.getCalendarsAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getCalendarsAsync');\n\n        case 2:\n          if (entityType) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", ExpoCalendar.getCalendarsAsync(null));\n\n        case 4:\n          return _context.abrupt(\"return\", ExpoCalendar.getCalendarsAsync(entityType));\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createCalendarAsync() {\n  var details,\n      color,\n      newDetails,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function createCalendarAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          details = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n          if (ExpoCalendar.saveCalendarAsync) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'createCalendarAsync');\n\n        case 3:\n          color = details.color ? processColor(details.color) : undefined;\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            id: undefined,\n            color: color\n          });\n          return _context2.abrupt(\"return\", ExpoCalendar.saveCalendarAsync(newDetails));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateCalendarAsync(id) {\n  var details,\n      color,\n      newDetails,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function updateCalendarAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          details = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n\n          if (ExpoCalendar.saveCalendarAsync) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'updateCalendarAsync');\n\n        case 3:\n          if (id) {\n            _context3.next = 5;\n            break;\n          }\n\n          throw new Error('updateCalendarAsync must be called with an id (string) of the target calendar');\n\n        case 5:\n          color = details.color ? processColor(details.color) : undefined;\n\n          if (Platform.OS === 'android') {\n            if (details.hasOwnProperty('source') || details.hasOwnProperty('color') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities') || details.hasOwnProperty('isPrimary') || details.hasOwnProperty('ownerAccount') || details.hasOwnProperty('timeZone') || details.hasOwnProperty('allowedReminders') || details.hasOwnProperty('allowedAttendeeTypes') || details.hasOwnProperty('accessLevel')) {\n              console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');\n            }\n          } else {\n            if (details.hasOwnProperty('source') || details.hasOwnProperty('type') || details.hasOwnProperty('entityType') || details.hasOwnProperty('allowsModifications') || details.hasOwnProperty('allowedAvailabilities')) {\n              console.warn('updateCalendarAsync was called with one or more read-only properties, which will not be updated');\n            }\n          }\n\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            id: id,\n            color: color\n          });\n          return _context3.abrupt(\"return\", ExpoCalendar.saveCalendarAsync(newDetails));\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteCalendarAsync(id) {\n  return _regeneratorRuntime.async(function deleteCalendarAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (ExpoCalendar.deleteCalendarAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'deleteCalendarAsync');\n\n        case 2:\n          if (id) {\n            _context4.next = 4;\n            break;\n          }\n\n          throw new Error('deleteCalendarAsync must be called with an id (string) of the target calendar');\n\n        case 4:\n          return _context4.abrupt(\"return\", ExpoCalendar.deleteCalendarAsync(id));\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getEventsAsync(calendarIds, startDate, endDate) {\n  return _regeneratorRuntime.async(function getEventsAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExpoCalendar.getEventsAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getEventsAsync');\n\n        case 2:\n          if (startDate) {\n            _context5.next = 4;\n            break;\n          }\n\n          throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n\n        case 4:\n          if (endDate) {\n            _context5.next = 6;\n            break;\n          }\n\n          throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n\n        case 6:\n          if (!(!calendarIds || !calendarIds.length)) {\n            _context5.next = 8;\n            break;\n          }\n\n          throw new Error('getEventsAsync must be called with a non-empty array of calendarIds to search');\n\n        case 8:\n          return _context5.abrupt(\"return\", ExpoCalendar.getEventsAsync(stringifyIfDate(startDate), stringifyIfDate(endDate), calendarIds));\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getEventAsync(id) {\n  var _ref,\n      _ref$futureEvents,\n      futureEvents,\n      instanceStartDate,\n      _args6 = arguments;\n\n  return _regeneratorRuntime.async(function getEventAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _ref = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {}, _ref$futureEvents = _ref.futureEvents, futureEvents = _ref$futureEvents === void 0 ? false : _ref$futureEvents, instanceStartDate = _ref.instanceStartDate;\n\n          if (ExpoCalendar.getEventByIdAsync) {\n            _context6.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getEventAsync');\n\n        case 3:\n          if (id) {\n            _context6.next = 5;\n            break;\n          }\n\n          throw new Error('getEventAsync must be called with an id (string) of the target event');\n\n        case 5:\n          if (!(Platform.OS === 'ios')) {\n            _context6.next = 9;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", ExpoCalendar.getEventByIdAsync(id, instanceStartDate));\n\n        case 9:\n          return _context6.abrupt(\"return\", ExpoCalendar.getEventByIdAsync(id));\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createEventAsync(calendarId) {\n  var _ref2,\n      id,\n      details,\n      newDetails,\n      _args7 = arguments;\n\n  return _regeneratorRuntime.async(function createEventAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _ref2 = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {}, id = _ref2.id, details = _objectWithoutProperties(_ref2, [\"id\"]);\n\n          if (ExpoCalendar.saveEventAsync) {\n            _context7.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'createEventAsync');\n\n        case 3:\n          if (calendarId) {\n            _context7.next = 5;\n            break;\n          }\n\n          throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n\n        case 5:\n          if (!(Platform.OS === 'android')) {\n            _context7.next = 10;\n            break;\n          }\n\n          if (details.startDate) {\n            _context7.next = 8;\n            break;\n          }\n\n          throw new Error('createEventAsync requires a startDate (Date)');\n\n        case 8:\n          if (details.endDate) {\n            _context7.next = 10;\n            break;\n          }\n\n          throw new Error('createEventAsync requires an endDate (Date)');\n\n        case 10:\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            calendarId: calendarId\n          });\n          return _context7.abrupt(\"return\", ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {}));\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateEventAsync(id) {\n  var details,\n      _ref3,\n      _ref3$futureEvents,\n      futureEvents,\n      instanceStartDate,\n      newDetails,\n      _args8 = arguments;\n\n  return _regeneratorRuntime.async(function updateEventAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          details = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n          _ref3 = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {}, _ref3$futureEvents = _ref3.futureEvents, futureEvents = _ref3$futureEvents === void 0 ? false : _ref3$futureEvents, instanceStartDate = _ref3.instanceStartDate;\n\n          if (ExpoCalendar.saveEventAsync) {\n            _context8.next = 4;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'updateEventAsync');\n\n        case 4:\n          if (id) {\n            _context8.next = 6;\n            break;\n          }\n\n          throw new Error('updateEventAsync must be called with an id (string) of the target event');\n\n        case 6:\n          if (Platform.OS === 'ios') {\n            if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate') || details.hasOwnProperty('originalStartDate') || details.hasOwnProperty('isDetached') || details.hasOwnProperty('status') || details.hasOwnProperty('organizer')) {\n              console.warn('updateEventAsync was called with one or more read-only properties, which will not be updated');\n            }\n          }\n\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            id: id,\n            instanceStartDate: instanceStartDate\n          });\n          return _context8.abrupt(\"return\", ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {\n            futureEvents: futureEvents\n          }));\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteEventAsync(id) {\n  var _ref4,\n      _ref4$futureEvents,\n      futureEvents,\n      instanceStartDate,\n      _args9 = arguments;\n\n  return _regeneratorRuntime.async(function deleteEventAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _ref4 = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {}, _ref4$futureEvents = _ref4.futureEvents, futureEvents = _ref4$futureEvents === void 0 ? false : _ref4$futureEvents, instanceStartDate = _ref4.instanceStartDate;\n\n          if (ExpoCalendar.deleteEventAsync) {\n            _context9.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'deleteEventAsync');\n\n        case 3:\n          if (id) {\n            _context9.next = 5;\n            break;\n          }\n\n          throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n\n        case 5:\n          return _context9.abrupt(\"return\", ExpoCalendar.deleteEventAsync({\n            id: id,\n            instanceStartDate: instanceStartDate\n          }, {\n            futureEvents: futureEvents\n          }));\n\n        case 6:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAttendeesForEventAsync(id) {\n  var _ref5,\n      _ref5$futureEvents,\n      futureEvents,\n      instanceStartDate,\n      params,\n      _args10 = arguments;\n\n  return _regeneratorRuntime.async(function getAttendeesForEventAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _ref5 = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {}, _ref5$futureEvents = _ref5.futureEvents, futureEvents = _ref5$futureEvents === void 0 ? false : _ref5$futureEvents, instanceStartDate = _ref5.instanceStartDate;\n\n          if (ExpoCalendar.getAttendeesForEventAsync) {\n            _context10.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n\n        case 3:\n          if (id) {\n            _context10.next = 5;\n            break;\n          }\n\n          throw new Error('getAttendeesForEventAsync must be called with an id (string) of the target event');\n\n        case 5:\n          params = Platform.OS === 'ios' ? {\n            id: id,\n            instanceStartDate: instanceStartDate\n          } : id;\n          return _context10.abrupt(\"return\", ExpoCalendar.getAttendeesForEventAsync(params));\n\n        case 7:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createAttendeeAsync(eventId) {\n  var details,\n      newDetails,\n      _args11 = arguments;\n  return _regeneratorRuntime.async(function createAttendeeAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          details = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n\n          if (ExpoCalendar.saveAttendeeForEventAsync) {\n            _context11.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'createAttendeeAsync');\n\n        case 3:\n          if (eventId) {\n            _context11.next = 5;\n            break;\n          }\n\n          throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n\n        case 5:\n          if (details.email) {\n            _context11.next = 7;\n            break;\n          }\n\n          throw new Error('createAttendeeAsync requires an email (string)');\n\n        case 7:\n          if (details.role) {\n            _context11.next = 9;\n            break;\n          }\n\n          throw new Error('createAttendeeAsync requires a role (string)');\n\n        case 9:\n          if (details.type) {\n            _context11.next = 11;\n            break;\n          }\n\n          throw new Error('createAttendeeAsync requires a type (string)');\n\n        case 11:\n          if (details.status) {\n            _context11.next = 13;\n            break;\n          }\n\n          throw new Error('createAttendeeAsync requires a status (string)');\n\n        case 13:\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            id: undefined\n          });\n          return _context11.abrupt(\"return\", ExpoCalendar.saveAttendeeForEventAsync(newDetails, eventId));\n\n        case 15:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateAttendeeAsync(id) {\n  var details,\n      newDetails,\n      _args12 = arguments;\n  return _regeneratorRuntime.async(function updateAttendeeAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          details = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n\n          if (ExpoCalendar.saveAttendeeForEventAsync) {\n            _context12.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'updateAttendeeAsync');\n\n        case 3:\n          if (id) {\n            _context12.next = 5;\n            break;\n          }\n\n          throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n\n        case 5:\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            id: id\n          });\n          return _context12.abrupt(\"return\", ExpoCalendar.saveAttendeeForEventAsync(newDetails, null));\n\n        case 7:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getDefaultCalendarAsync() {\n  return _regeneratorRuntime.async(function getDefaultCalendarAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          if (ExpoCalendar.getDefaultCalendarAsync) {\n            _context13.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n\n        case 2:\n          return _context13.abrupt(\"return\", ExpoCalendar.getDefaultCalendarAsync());\n\n        case 3:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAttendeeAsync(id) {\n  return _regeneratorRuntime.async(function deleteAttendeeAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          if (ExpoCalendar.deleteAttendeeAsync) {\n            _context14.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n\n        case 2:\n          if (id) {\n            _context14.next = 4;\n            break;\n          }\n\n          throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n\n        case 4:\n          return _context14.abrupt(\"return\", ExpoCalendar.deleteAttendeeAsync(id));\n\n        case 5:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getRemindersAsync(calendarIds, status, startDate, endDate) {\n  return _regeneratorRuntime.async(function getRemindersAsync$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          if (ExpoCalendar.getRemindersAsync) {\n            _context15.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getRemindersAsync');\n\n        case 2:\n          if (!(status && !startDate)) {\n            _context15.next = 4;\n            break;\n          }\n\n          throw new Error('getRemindersAsync must be called with a startDate (date) to search for reminders');\n\n        case 4:\n          if (!(status && !endDate)) {\n            _context15.next = 6;\n            break;\n          }\n\n          throw new Error('getRemindersAsync must be called with an endDate (date) to search for reminders');\n\n        case 6:\n          if (!(!calendarIds || !calendarIds.length)) {\n            _context15.next = 8;\n            break;\n          }\n\n          throw new Error('getRemindersAsync must be called with a non-empty array of calendarIds to search');\n\n        case 8:\n          return _context15.abrupt(\"return\", ExpoCalendar.getRemindersAsync(stringifyIfDate(startDate) || null, stringifyIfDate(endDate) || null, calendarIds, status || null));\n\n        case 9:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getReminderAsync(id) {\n  return _regeneratorRuntime.async(function getReminderAsync$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          if (ExpoCalendar.getReminderByIdAsync) {\n            _context16.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getReminderAsync');\n\n        case 2:\n          if (id) {\n            _context16.next = 4;\n            break;\n          }\n\n          throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n\n        case 4:\n          return _context16.abrupt(\"return\", ExpoCalendar.getReminderByIdAsync(id));\n\n        case 5:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createReminderAsync(calendarId) {\n  var _ref6,\n      id,\n      details,\n      newDetails,\n      _args17 = arguments;\n\n  return _regeneratorRuntime.async(function createReminderAsync$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _ref6 = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {}, id = _ref6.id, details = _objectWithoutProperties(_ref6, [\"id\"]);\n\n          if (ExpoCalendar.saveReminderAsync) {\n            _context17.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'createReminderAsync');\n\n        case 3:\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            calendarId: calendarId === null ? undefined : calendarId\n          });\n          return _context17.abrupt(\"return\", ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails)));\n\n        case 5:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateReminderAsync(id) {\n  var details,\n      newDetails,\n      _args18 = arguments;\n  return _regeneratorRuntime.async(function updateReminderAsync$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          details = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};\n\n          if (ExpoCalendar.saveReminderAsync) {\n            _context18.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'updateReminderAsync');\n\n        case 3:\n          if (id) {\n            _context18.next = 5;\n            break;\n          }\n\n          throw new Error('updateReminderAsync must be called with an id (string) of the target reminder');\n\n        case 5:\n          if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {\n            console.warn('updateReminderAsync was called with one or more read-only properties, which will not be updated');\n          }\n\n          newDetails = _objectSpread(_objectSpread({}, details), {}, {\n            id: id\n          });\n          return _context18.abrupt(\"return\", ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails)));\n\n        case 8:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteReminderAsync(id) {\n  return _regeneratorRuntime.async(function deleteReminderAsync$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          if (ExpoCalendar.deleteReminderAsync) {\n            _context19.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'deleteReminderAsync');\n\n        case 2:\n          if (id) {\n            _context19.next = 4;\n            break;\n          }\n\n          throw new Error('deleteReminderAsync must be called with an id (string) of the target reminder');\n\n        case 4:\n          return _context19.abrupt(\"return\", ExpoCalendar.deleteReminderAsync(id));\n\n        case 5:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSourcesAsync() {\n  return _regeneratorRuntime.async(function getSourcesAsync$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          if (ExpoCalendar.getSourcesAsync) {\n            _context20.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getSourcesAsync');\n\n        case 2:\n          return _context20.abrupt(\"return\", ExpoCalendar.getSourcesAsync());\n\n        case 3:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSourceAsync(id) {\n  return _regeneratorRuntime.async(function getSourceAsync$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          if (ExpoCalendar.getSourceByIdAsync) {\n            _context21.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getSourceAsync');\n\n        case 2:\n          if (id) {\n            _context21.next = 4;\n            break;\n          }\n\n          throw new Error('getSourceAsync must be called with an id (string) of the target source');\n\n        case 4:\n          return _context21.abrupt(\"return\", ExpoCalendar.getSourceByIdAsync(id));\n\n        case 5:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function openEventInCalendar(id) {\n  if (!ExpoCalendar.openEventInCalendar) {\n    console.warn(\"openEventInCalendar is not available on platform: \" + Platform.OS);\n    return;\n  }\n\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n\n  return ExpoCalendar.openEventInCalendar(parseInt(id, 10));\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          console.warn('requestPermissionsAsync is deprecated. Use requestCalendarPermissionsAsync instead.');\n          return _context22.abrupt(\"return\", requestCalendarPermissionsAsync());\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getCalendarPermissionsAsync() {\n  return _regeneratorRuntime.async(function getCalendarPermissionsAsync$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          if (ExpoCalendar.getCalendarPermissionsAsync) {\n            _context23.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n\n        case 2:\n          return _context23.abrupt(\"return\", ExpoCalendar.getCalendarPermissionsAsync());\n\n        case 3:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getRemindersPermissionsAsync() {\n  return _regeneratorRuntime.async(function getRemindersPermissionsAsync$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          if (ExpoCalendar.getRemindersPermissionsAsync) {\n            _context24.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n\n        case 2:\n          return _context24.abrupt(\"return\", ExpoCalendar.getRemindersPermissionsAsync());\n\n        case 3:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestCalendarPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestCalendarPermissionsAsync$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          if (ExpoCalendar.requestCalendarPermissionsAsync) {\n            _context25.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n\n        case 2:\n          _context25.next = 4;\n          return _regeneratorRuntime.awrap(ExpoCalendar.requestCalendarPermissionsAsync());\n\n        case 4:\n          return _context25.abrupt(\"return\", _context25.sent);\n\n        case 5:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestRemindersPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestRemindersPermissionsAsync$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          if (ExpoCalendar.requestRemindersPermissionsAsync) {\n            _context26.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n\n        case 2:\n          _context26.next = 4;\n          return _regeneratorRuntime.awrap(ExpoCalendar.requestRemindersPermissionsAsync());\n\n        case 4:\n          return _context26.abrupt(\"return\", _context26.sent);\n\n        case 5:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder'\n};\nexport var Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly'\n};\nexport var Availability = {\n  NOT_SUPPORTED: 'notSupported',\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable'\n};\nexport var CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown'\n};\nexport var EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled'\n};\nexport var SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays'\n};\nexport var AttendeeRole = {\n  UNKNOWN: 'unknown',\n  REQUIRED: 'required',\n  OPTIONAL: 'optional',\n  CHAIR: 'chair',\n  NON_PARTICIPANT: 'nonParticipant',\n  ATTENDEE: 'attendee',\n  ORGANIZER: 'organizer',\n  PERFORMER: 'performer',\n  SPEAKER: 'speaker',\n  NONE: 'none'\n};\nexport var AttendeeStatus = {\n  UNKNOWN: 'unknown',\n  PENDING: 'pending',\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated',\n  COMPLETED: 'completed',\n  IN_PROCESS: 'inProcess',\n  INVITED: 'invited',\n  NONE: 'none'\n};\nexport var AttendeeType = {\n  UNKNOWN: 'unknown',\n  PERSON: 'person',\n  ROOM: 'room',\n  GROUP: 'group',\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional',\n  REQUIRED: 'required',\n  NONE: 'none'\n};\nexport var AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default'\n};\nexport var EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default'\n};\nexport var CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none'\n};\nexport var ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete'\n};\n\nfunction stringifyIfDate(date) {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\nfunction stringifyDateValues(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    var value = obj[key];\n\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, value.map(stringifyDateValues)));\n      }\n\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, stringifyDateValues(value)));\n    }\n\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["../src/Calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { Platform, processColor } from 'react-native';\nimport { PermissionResponse, PermissionStatus } from 'unimodules-permissions-interface';\n\nimport ExpoCalendar from './ExpoCalendar';\n\nexport type RecurringEventOptions = {\n  futureEvents?: boolean;\n  instanceStartDate?: string | Date;\n}; // iOS\n\nexport interface Calendar {\n  id: string;\n  title: string;\n  sourceId?: string; // iOS\n  source: Source;\n  type?: string; // iOS\n  color: string;\n  entityType?: string; // iOS\n  allowsModifications: boolean;\n  allowedAvailabilities: string[];\n  isPrimary?: boolean; // Android\n  name?: string | null; // Android\n  ownerAccount?: string; // Android\n  timeZone?: string; // Android\n  allowedReminders?: string[]; // Android\n  allowedAttendeeTypes?: string[]; // Android\n  isVisible?: boolean; // Android\n  isSynced?: boolean; // Android\n  accessLevel?: string; // Android\n}\n\nexport type Source = {\n  id?: string; // iOS only ??\n  type: string;\n  name: string;\n  isLocalAccount?: boolean; // Android\n};\n\nexport type Event = {\n  id: string;\n  calendarId: string;\n  title: string;\n  location: string;\n  creationDate?: string | Date; // iOS\n  lastModifiedDate?: string | Date; // iOS\n  timeZone: string;\n  endTimeZone?: string; // Android\n  url?: string; // iOS\n  notes: string;\n  alarms: Alarm[];\n  recurrenceRule: RecurrenceRule;\n  startDate: string | Date;\n  endDate: string | Date;\n  originalStartDate?: string | Date; // iOS\n  isDetached?: boolean; // iOS\n  allDay: boolean;\n  availability: string; // Availability\n  status: string; // Status\n  organizer?: string; // Organizer - iOS\n  organizerEmail?: string; // Android\n  accessLevel?: string; // Android,\n  guestsCanModify?: boolean; // Android,\n  guestsCanInviteOthers?: boolean; // Android\n  guestsCanSeeGuests?: boolean; // Android\n  originalId?: string; // Android\n  instanceId?: string; // Android\n};\n\nexport interface Reminder {\n  id?: string;\n  calendarId?: string;\n  title?: string;\n  location?: string;\n  creationDate?: string | Date;\n  lastModifiedDate?: string | Date;\n  timeZone?: string;\n  url?: string;\n  notes?: string;\n  alarms?: Alarm[];\n  recurrenceRule?: RecurrenceRule;\n  startDate?: string | Date;\n  dueDate?: string | Date;\n  completed?: boolean;\n  completionDate?: string | Date;\n}\n\nexport type Attendee = {\n  id?: string; // Android\n  isCurrentUser?: boolean; // iOS\n  name: string;\n  role: string;\n  status: string;\n  type: string;\n  url?: string; // iOS\n  email?: string; // Android\n};\n\nexport type Alarm = {\n  absoluteDate?: string; // iOS\n  relativeOffset?: number;\n  structuredLocation?: {\n    // iOS\n    title?: string;\n    proximity?: string; // Proximity\n    radius?: number;\n    coords?: {\n      latitude?: number;\n      longitude?: number;\n    };\n  };\n  method?: string; // Method, Android\n};\n\nexport enum DayOfTheWeek {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7,\n}\n\nexport enum MonthOfTheYear {\n  January = 1,\n  February = 2,\n  March = 3,\n  April = 4,\n  May = 5,\n  June = 6,\n  July = 7,\n  August = 8,\n  September = 9,\n  October = 10,\n  November = 11,\n  December = 12,\n}\n\nexport type RecurrenceRule = {\n  frequency: string; // Frequency\n  interval?: number;\n  endDate?: string | Date;\n  occurrence?: number;\n\n  daysOfTheWeek?: { dayOfTheWeek: DayOfTheWeek; weekNumber?: number }[];\n  daysOfTheMonth?: number[];\n  monthsOfTheYear?: MonthOfTheYear[];\n  weeksOfTheYear?: number[];\n  daysOfTheYear?: number[];\n  setPositions?: number[];\n};\n\nexport { PermissionResponse, PermissionStatus };\n\ntype OptionalKeys<T> = {\n  [P in keyof T]?: T[P] | null;\n};\n\nexport async function getCalendarsAsync(entityType?: string): Promise<Calendar[]> {\n  if (!ExpoCalendar.getCalendarsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarsAsync');\n  }\n  if (!entityType) {\n    return ExpoCalendar.getCalendarsAsync(null);\n  }\n  return ExpoCalendar.getCalendarsAsync(entityType);\n}\n\nexport async function createCalendarAsync(details: OptionalKeys<Calendar> = {}): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'createCalendarAsync');\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n  const newDetails = { ...details, id: undefined, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\nexport async function updateCalendarAsync(\n  id: string,\n  details: OptionalKeys<Calendar> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'updateCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n\n  if (Platform.OS === 'android') {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('color') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities') ||\n      details.hasOwnProperty('isPrimary') ||\n      details.hasOwnProperty('ownerAccount') ||\n      details.hasOwnProperty('timeZone') ||\n      details.hasOwnProperty('allowedReminders') ||\n      details.hasOwnProperty('allowedAttendeeTypes') ||\n      details.hasOwnProperty('accessLevel')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  } else {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('type') ||\n      details.hasOwnProperty('entityType') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const newDetails = { ...details, id, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\nexport async function deleteCalendarAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  return ExpoCalendar.deleteCalendarAsync(id);\n}\n\nexport async function getEventsAsync(\n  calendarIds: string[],\n  startDate: Date,\n  endDate: Date\n): Promise<Event[]> {\n  if (!ExpoCalendar.getEventsAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventsAsync');\n  }\n  if (!startDate) {\n    throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n  }\n  if (!endDate) {\n    throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getEventsAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getEventsAsync(\n    stringifyIfDate(startDate),\n    stringifyIfDate(endDate),\n    calendarIds\n  );\n}\n\nexport async function getEventAsync(\n  id: string,\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<Event> {\n  if (!ExpoCalendar.getEventByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventAsync');\n  }\n  if (!id) {\n    throw new Error('getEventAsync must be called with an id (string) of the target event');\n  }\n  if (Platform.OS === 'ios') {\n    return ExpoCalendar.getEventByIdAsync(id, instanceStartDate);\n  } else {\n    return ExpoCalendar.getEventByIdAsync(id);\n  }\n}\n\nexport async function createEventAsync(\n  calendarId: string,\n  { id, ...details }: OptionalKeys<Event> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createEventAsync');\n  }\n  if (!calendarId) {\n    throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n  }\n\n  if (Platform.OS === 'android') {\n    if (!details.startDate) {\n      throw new Error('createEventAsync requires a startDate (Date)');\n    }\n    if (!details.endDate) {\n      throw new Error('createEventAsync requires an endDate (Date)');\n    }\n  }\n\n  const newDetails = {\n    ...details,\n    calendarId,\n  };\n\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {});\n}\n\nexport async function updateEventAsync(\n  id: string,\n  details: OptionalKeys<Event> = {},\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateEventAsync');\n  }\n  if (!id) {\n    throw new Error('updateEventAsync must be called with an id (string) of the target event');\n  }\n\n  if (Platform.OS === 'ios') {\n    if (\n      details.hasOwnProperty('creationDate') ||\n      details.hasOwnProperty('lastModifiedDate') ||\n      details.hasOwnProperty('originalStartDate') ||\n      details.hasOwnProperty('isDetached') ||\n      details.hasOwnProperty('status') ||\n      details.hasOwnProperty('organizer')\n    ) {\n      console.warn(\n        'updateEventAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const newDetails = { ...details, id, instanceStartDate };\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), { futureEvents });\n}\n\nexport async function deleteEventAsync(\n  id: string,\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<void> {\n  if (!ExpoCalendar.deleteEventAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteEventAsync');\n  }\n  if (!id) {\n    throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.deleteEventAsync({ id, instanceStartDate }, { futureEvents });\n}\n\nexport async function getAttendeesForEventAsync(\n  id: string,\n  { futureEvents = false, instanceStartDate }: RecurringEventOptions = {}\n): Promise<Attendee[]> {\n  if (!ExpoCalendar.getAttendeesForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'getAttendeesForEventAsync must be called with an id (string) of the target event'\n    );\n  }\n  // Android only takes an ID, iOS takes an object\n  const params = Platform.OS === 'ios' ? { id, instanceStartDate } : id;\n  return ExpoCalendar.getAttendeesForEventAsync(params);\n}\n\nexport async function createAttendeeAsync(\n  eventId: string,\n  details: OptionalKeys<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createAttendeeAsync');\n  }\n  if (!eventId) {\n    throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n  }\n  if (!details.email) {\n    throw new Error('createAttendeeAsync requires an email (string)');\n  }\n  if (!details.role) {\n    throw new Error('createAttendeeAsync requires a role (string)');\n  }\n  if (!details.type) {\n    throw new Error('createAttendeeAsync requires a type (string)');\n  }\n  if (!details.status) {\n    throw new Error('createAttendeeAsync requires a status (string)');\n  }\n  const newDetails = { ...details, id: undefined };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, eventId);\n} // Android\n\nexport async function updateAttendeeAsync(\n  id: string,\n  details: OptionalKeys<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n  }\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, null);\n} // Android\n\nexport async function getDefaultCalendarAsync(): Promise<Calendar> {\n  if (!ExpoCalendar.getDefaultCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n  }\n  return ExpoCalendar.getDefaultCalendarAsync();\n} // iOS\n\nexport async function deleteAttendeeAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteAttendeeAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.deleteAttendeeAsync(id);\n} // Android\n\nexport async function getRemindersAsync(\n  calendarIds: (string | null)[],\n  status: string | null,\n  startDate: Date,\n  endDate: Date\n): Promise<Reminder[]> {\n  if (!ExpoCalendar.getRemindersAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersAsync');\n  }\n  if (status && !startDate) {\n    throw new Error(\n      'getRemindersAsync must be called with a startDate (date) to search for reminders'\n    );\n  }\n  if (status && !endDate) {\n    throw new Error(\n      'getRemindersAsync must be called with an endDate (date) to search for reminders'\n    );\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getRemindersAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getRemindersAsync(\n    stringifyIfDate(startDate) || null,\n    stringifyIfDate(endDate) || null,\n    calendarIds,\n    status || null\n  );\n} // iOS\n\nexport async function getReminderAsync(id: string): Promise<Reminder> {\n  if (!ExpoCalendar.getReminderByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getReminderAsync');\n  }\n  if (!id) {\n    throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n  }\n  return ExpoCalendar.getReminderByIdAsync(id);\n} // iOS\n\nexport async function createReminderAsync(\n  calendarId: string | null,\n  { id, ...details }: Reminder = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'createReminderAsync');\n  }\n\n  const newDetails = {\n    ...details,\n    calendarId: calendarId === null ? undefined : calendarId,\n  };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n} // iOS\n\nexport async function updateReminderAsync(id: string, details: Reminder = {}): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'updateReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n\n  if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {\n    console.warn(\n      'updateReminderAsync was called with one or more read-only properties, which will not be updated'\n    );\n  }\n\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n} // iOS\n\nexport async function deleteReminderAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n  return ExpoCalendar.deleteReminderAsync(id);\n} // iOS\n\nexport async function getSourcesAsync(): Promise<Source[]> {\n  if (!ExpoCalendar.getSourcesAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourcesAsync');\n  }\n  return ExpoCalendar.getSourcesAsync();\n} // iOS\n\nexport async function getSourceAsync(id: string): Promise<Source> {\n  if (!ExpoCalendar.getSourceByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourceAsync');\n  }\n  if (!id) {\n    throw new Error('getSourceAsync must be called with an id (string) of the target source');\n  }\n  return ExpoCalendar.getSourceByIdAsync(id);\n} // iOS\n\nexport function openEventInCalendar(id: string): void {\n  if (!ExpoCalendar.openEventInCalendar) {\n    console.warn(`openEventInCalendar is not available on platform: ${Platform.OS}`);\n    return;\n  }\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.openEventInCalendar(parseInt(id, 10));\n} // Android\n\n/**\n * @deprecated Use requestCalendarPermissionsAsync()\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  console.warn(\n    'requestPermissionsAsync is deprecated. Use requestCalendarPermissionsAsync instead.'\n  );\n  return requestCalendarPermissionsAsync();\n}\n\nexport async function getCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n  }\n  return ExpoCalendar.getCalendarPermissionsAsync();\n}\n\nexport async function getRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n  }\n  return ExpoCalendar.getRemindersPermissionsAsync();\n}\n\nexport async function requestCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n  }\n  return await ExpoCalendar.requestCalendarPermissionsAsync();\n}\n\nexport async function requestRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n  }\n  return await ExpoCalendar.requestRemindersPermissionsAsync();\n}\n\nexport const EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder',\n};\n\nexport const Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n};\n\nexport const Availability = {\n  NOT_SUPPORTED: 'notSupported', // iOS\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable', // iOS\n};\n\nexport const CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown',\n}; // iOS\n\nexport const EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled',\n};\n\nexport const SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n};\n\nexport const AttendeeRole = {\n  UNKNOWN: 'unknown', // iOS\n  REQUIRED: 'required', // iOS\n  OPTIONAL: 'optional', // iOS\n  CHAIR: 'chair', // iOS\n  NON_PARTICIPANT: 'nonParticipant', // iOS\n  ATTENDEE: 'attendee', // Android\n  ORGANIZER: 'organizer', // Android\n  PERFORMER: 'performer', // Android\n  SPEAKER: 'speaker', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeStatus = {\n  UNKNOWN: 'unknown', // iOS\n  PENDING: 'pending', // iOS\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated', // iOS\n  COMPLETED: 'completed', // iOS\n  IN_PROCESS: 'inProcess', // iOS\n  INVITED: 'invited', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeType = {\n  UNKNOWN: 'unknown', // iOS\n  PERSON: 'person', // iOS\n  ROOM: 'room', // iOS\n  GROUP: 'group', // iOS\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional', // Android\n  REQUIRED: 'required', // Android\n  NONE: 'none', // Android\n};\n\nexport const AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default',\n};\n\nexport const EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default',\n};\n\nexport const CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none',\n};\n\nexport const ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete',\n};\n\nfunction stringifyIfDate(date: any): any {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\nfunction stringifyDateValues(obj: object): object {\n  return Object.keys(obj).reduce((acc, key) => {\n    const value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return { ...acc, [key]: value.map(stringifyDateValues) };\n      }\n      return { ...acc, [key]: stringifyDateValues(value) };\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}